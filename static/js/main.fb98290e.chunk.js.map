{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/ErrorBoundry.js","App.js","redux/Actions/actions.js","redux/Reducers/reducers.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Card","robot","className","src","id","alt","name","email","CardList","robots","map","i","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchfield","text","payload","setSearchfield","target","value","onRequestRobots","items","fetch","then","res","json","data","catch","useEffect","filteredRobots","filter","toLowerCase","includes","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb98290e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = ({ robot }) => {\r\n    //console.log(robot);\r\n\r\n    return (\r\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${robot.id}?200x200`} alt=\"ima\" />\r\n            <div>\r\n                <h2>{robot.name}</h2>\r\n                <p>{robot.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    //console.log(robots);\r\n\r\n    // if (true) {\r\n    //     throw new Error('NOOOOOO');\r\n    // }\r\n    return (\r\n        robots.map((robot, i) => {\r\n            return < Card key={i} robot={robot} />\r\n        })\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    //console.log(searchChange);\r\n\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"tc pa2 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search Robots...\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        //console.log(error, info)\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.state.hasError, this.props);\r\n\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good !!!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { useEffect } from 'react';\nimport './App.css';\n\n//components\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\n//import { robots } from './components/robots';\nimport ErrorBoundry from './components/ErrorBoundry';\n\n//redux\nimport { connect } from 'react-redux';\n//actions\nimport { setSearchfield, requestRobots } from './redux/Actions/actions';\n\n\nconst App = ({ searchField, onSearchfield, robots, isPending, error, onRequestRobots }) => {\n  useEffect(() => {\n    onRequestRobots()\n  }, [onRequestRobots])\n  //console.log(searchField, setSearchfield);\n\n  //console.log(robots, isPending, error);\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n  //console.log('render');\n\n  return isPending ? <h1>Loading</h1> : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchfield} />\n      <ErrorBoundry>\n        <CardList robots={filteredRobots} />\n      </ErrorBoundry>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchfield: text => dispatch(setSearchfield(text.target.value)),\n  onRequestRobots: (items) => dispatch(requestRobots(items))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","export const setSearchfield = (text) => {\r\n    //console.log(text);\r\n    return {\r\n        type: 'CHANGE_SEARCH_FIELD',\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    // first request is pending\r\n    // second request is success \r\n    // third request is failed\r\n\r\n    // first\r\n    dispatch({ type: 'REQUEST_ROBOTS_PENDING' });\r\n    // second\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({ type: 'REQUEST_ROBOTS_SUCCESS', payload: data }))\r\n        // third\r\n        .catch(error => dispatch({ type: 'REQUEST_ROBOTS_FAILED', payload: error }))\r\n}","const initialStateSearch = {\r\n    searchField: ''\r\n}\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n    //console.log(action.type);\r\n    switch (action.type) {\r\n        case 'CHANGE_SEARCH_FIELD':\r\n            return {\r\n                ...state,\r\n                searchField: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action) => {\r\n    //console.log(action.type);\r\n    switch (action.type) {\r\n        case 'REQUEST_ROBOTS_PENDING':\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case 'REQUEST_ROBOTS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                robots: action.payload,\r\n                isPending: false\r\n            }\r\n        case 'REQUEST_ROBOTS_FAILED':\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isPending: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './Reducers/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n    searchRobots: searchRobots,\r\n    requestRobots: requestRobots\r\n})\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n//const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk)));\r\nexport default store;","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n// import { Provider } from 'react-redux';\n// import store from './redux/store';\n\n// ReactDOM.render(\n//   <Provider store={store}>\n//     <App />\n//   </Provider>,\n//   document.getElementById('root')\n// );\n// reportWebVitals();\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}